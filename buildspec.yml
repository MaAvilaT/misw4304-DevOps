version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9  # Cambia a la versión de Python que uses
    commands:
      - echo "Actualizando e instalando herramientas del sistema..."
      - yum update -y  # yum es el gestor de Amazon Linux
      - yum install -y python3 python3-devel gcc  # Instalamos Python y herramientas de compilación
      - python3 -m ensurepip  # Aseguramos que pip esté instalado
      - pip3 install --upgrade pip
      - echo "Instalando Pipenv y habilitando venv..."
      - pip3 install pipenv  # Instalamos Pipenv usando pip

  pre_build:
    commands:
      - echo "Instalando dependencias del proyecto con Pipenv..."
      - cd msvc-email-blacklists  # Cambiamos al directorio del proyecto
      - pipenv install --dev  # Instalamos todas las dependencias, incluyendo las de desarrollo
      - echo "Configurando la variable FLASK_APP..."
      - export FLASK_APP=src/app.py  # Apunta a tu archivo principal Flask
      - export RDS_DB_NAME=email_blacklists
      - export RDS_HOSTNAME=localhost
      - export RDS_PORT=5432
      - export RDS_USERNAME=postgres
      - export RDS_PASSWORD=postgres

  build:
    commands:
      - echo "Iniciando la aplicación Flask para pruebas..."
      - nohup pipenv run flask run --host=0.0.0.0 &  # Ejecuta Flask en segundo plano
      - echo "Esperando que el servidor esté activo..."
      - sleep 5  # Da tiempo para que el servidor se inicie
      - curl http://localhost:3000  # Verifica que el servidor esté corriendo

  post_build:
    commands:
      - echo "Limpieza posterior a la compilación completada."

artifacts:
  files:
    - "**/*"  # Incluye todos los archivos como artefactos
  discard-paths: yes
